/*! For license information please see ultraloot.min.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.UltraLoot=e():t.UltraLoot=e()}(this,(()=>(()=>{"use strict";var __webpack_modules__={"./src/default/conditions.ts":(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.dependLooter=e.dependContext=void 0;const o=n("./src/utils.ts");e.dependContext=({context:t,args:e})=>(0,o.depend)(t,e);e.dependLooter=({looter:t,args:e})=>(0,o.depend)(t,e)},"./src/default/functions.ts":(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.setToRandomChoice=e.inheritContext=e.inheritLooter=void 0;const o=n("./src/utils.ts");e.inheritLooter=({looted:t,looter:e,args:n})=>{(0,o.dotSet)(t,n.property??n.lootedProperty,(0,o.dotGet)(e,n.property??n.looterProperty,n.default))};e.inheritContext=({looted:t,context:e,args:n})=>{(0,o.dotSet)(t,n.property??n.lootedProperty,(0,o.dotGet)(e,n.property??n.contextProperty,n.default))};e.setToRandomChoice=({rng:t,looted:e,args:n})=>{const{property:r,choices:s}=n;r&&e&&s&&(0,o.dotSet)(e,r,t.weightedChoice(s))}},"./src/index.ts":function(t,e,n){var o=this&&this.__createBinding||(Object.create?function(t,e,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(e,n);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,o,r)}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]}),r=this&&this.__exportStar||function(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||o(e,t,n)};Object.defineProperty(e,"__esModule",{value:!0}),e.LootTableEntryResults=e.LootTableEntryResult=e.LootTableEntry=e.LootTablePool=e.LootTableManager=e.LootTable=e.PredictableRng=e.Rng=void 0,r(n("./src/ultraloot.ts"),e),r(n("./src/rng.ts"),e),r(n("./src/rng/predictable.ts"),e),r(n("./src/table.ts"),e),r(n("./src/table/manager.ts"),e),r(n("./src/table/pool.ts"),e),r(n("./src/table/pool/entry.ts"),e),r(n("./src/table/pool/entry/result.ts"),e),r(n("./src/table/pool/entry/results.ts"),e);const s=n("./src/ultraloot.ts");var i=n("./src/rng.ts");Object.defineProperty(e,"Rng",{enumerable:!0,get:function(){return i.default}});var l=n("./src/rng/predictable.ts");Object.defineProperty(e,"PredictableRng",{enumerable:!0,get:function(){return l.default}});var a=n("./src/table.ts");Object.defineProperty(e,"LootTable",{enumerable:!0,get:function(){return a.default}});var c=n("./src/table/manager.ts");Object.defineProperty(e,"LootTableManager",{enumerable:!0,get:function(){return c.default}});var u=n("./src/table/pool.ts");Object.defineProperty(e,"LootTablePool",{enumerable:!0,get:function(){return u.default}});var d=n("./src/table/pool/entry.ts");Object.defineProperty(e,"LootTableEntry",{enumerable:!0,get:function(){return d.default}});var f=n("./src/table/pool/entry/result.ts");Object.defineProperty(e,"LootTableEntryResult",{enumerable:!0,get:function(){return f.default}});var h=n("./src/table/pool/entry/results.ts");Object.defineProperty(e,"LootTableEntryResults",{enumerable:!0,get:function(){return h.default}}),e.default=s.UltraLoot},"./src/log.ts":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});let n=!1;n=!0,n=!1;const o=(...t)=>{};let r={debug:o,v:o,vv:o,vi:o,ve:o,vg:o,vge:o,vgc:o,vt:o,d:o,g:o,ge:o,gc:o,t:o,te:o,time:o,timeEnd:o,group:o,groupEnd:o,groupCollapsed:o,log:o,error:o,table:o,info:o};n&&(r={...r,debug:function(t){n&&t()},d:console.log,g:console.group,ge:console.groupEnd,gc:console.groupCollapsed,group:console.group,groupEnd:console.groupEnd,groupCollapsed:console.groupCollapsed,log:console.log,error:console.error,table:console.table,info:console.info},r={...r,v:console.log,vi:console.info,ve:console.error,vg:console.group,vge:console.groupEnd,vgc:console.groupCollapsed,vt:console.table,t:console.time,te:console.timeEnd,time:console.time,timeEnd:console.timeEnd},r.vv=console.log),e.default=r},"./src/rng.ts":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RngAbstract=void 0;const n=/^ *([0-9]+) *[dD] *([0-9]+) *([+-]? *[0-9]*) *$/,o=/^ *[dD] *([0-9]+) *([+-]? *[0-9]*) *$/,r={},s={};class i{#t=0;constructor(t){this.setSeed(t)}getSeed(){return this.#t}sameAs(t){return this.#t===t.#t}setSeed(t){return null==t?this.setSeed(Math.ceil(1e8*Math.random())):("string"==typeof t&&(t=this.convertStringToNumber(t)),this.#t=t,this)}seed(t){return this.setSeed(t),this}serialize(){return{seed:this.#t}}static unserialize(t){const{constructor:e}=Object.getPrototypeOf(this),n=new e(t.seed);return n.setSeed(t.seed),n}predictable(t){const{constructor:e}=Object.getPrototypeOf(this);return new e(t)}static predictable(t){return new this(t)}hashStr(t){let e,n,o=0;if(0===t.length)return o;for(e=0;e<t.length;e++)n=t.charCodeAt(e),o=(o<<5)-o+n,o|=0;return o}convertStringToNumber(t){if(r[t])return r[t];const e=this.hashStr(t);return r[t]=e,e}_random(){return Math.random()}percentage(){return this.randBetween(0,100)}random(t=0,e=1,n=0){return this.randBetween(t,e,n)}chance(t,e=1){const n=t/e;return this._random()<=n}chanceTo(t,e){return this._random()<=t/(t+e)}randInt(t=0,e=1,n=0){[t,e]=[Math.min(t,e),Math.max(t,e)];let o=this._random();return o=n<0?1-Math.pow(o,Math.pow(2,n)):Math.pow(o,Math.pow(2,-n)),Math.floor(o*(e+1-t))+t}uniqid(t="",e=!1){return`${t}${(1e3*Date.now()+1e3*Math.random()).toString(16).replace(/\./g,"").padEnd(14,"0")}${e?`.${Math.trunc(1e8*Math.random())}`:""}`}uniqstr(t=6){const e=[];for(let n=0;n<t;n++)e.push("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"[this.randInt(0,61)]);return e.join("")}randBetween(t=0,e=1,n=0){[t,e]=[Math.min(t,e),Math.max(t,e)];let o=this._random();return o=n<0?1-Math.pow(o,Math.pow(2,n)):Math.pow(o,Math.pow(2,-n)),this.scaleNorm(o,t,e)}scale(t,e,n,o=0,r=1){if(t>r)throw new Error(`Number ${t} is greater than max of ${r}`);if(t<o)throw new Error(`Number ${t} is less than min of ${o}`);return t=(t-o)/(r-o),this.scaleNorm(t,e,n)}scaleNorm(t,e,n){if(t>1||t<0)throw new Error(`Number must be < 1 and > 0, got ${t}`);return t*(n-e)+e}shouldThrowOnMaxRecursionsReached(){return true}normal({mean:t,stddev:e=1,max:n,min:o,skew:r=0}={},s=0){if(s>100&&this.shouldThrowOnMaxRecursionsReached())throw new Error("Max recursive calls to rng normal function. This might be as a result of using predictable random numbers?");let i=this.boxMuller();if(i=i/10+.5,s>100)i=Math.min(Math.max(i,0),1);else if(i>1||i<0)return this.normal({mean:t,stddev:e,max:n,min:o,skew:r},s+1);return i=r<0?1-Math.pow(i,Math.pow(2,r)):Math.pow(i,Math.pow(2,-r)),void 0===t?(t=0,void 0!==n&&void 0!==o?(i*=n-o,i+=o):(i*=10,i-=5)):(i*=10,i-=5,i=i*e+t),s<=100&&(void 0!==n&&i>n||void 0!==o&&i<o)?this.normal({mean:t,stddev:e,max:n,min:o,skew:r},s+1):(void 0!==n&&(i=Math.min(i,n)),void 0!==o&&(i=Math.max(i,o)),i)}boxMuller(t=0,e=1){const n=1-this._random(),o=this._random();return Math.sqrt(-2*Math.log(n))*Math.cos(2*Math.PI*o)*e+t}chancyInt(t){return"number"==typeof t?Math.round(t):("object"==typeof t&&(t.type="integer"),this.chancy(t))}chancy(t){if("string"==typeof t)return this.dice(t);if("object"==typeof t)switch(t.type){case"normal":return this.normal(t);case"normal_integer":return Math.floor(this.normal(t));case"integer":return this.randInt(t.min??0,t.max??1,t.skew??0);default:return this.random(t.min??0,t.max??1,t.skew??0)}if("number"==typeof t)return t;throw new Error("Invalid input given to chancy")}static chancyMin(t){if("string"==typeof t)return this.diceMin(t);if("number"==typeof t)return t;if("object"==typeof t)switch(void 0===t.type&&void 0!==t.skew&&(t.type="normal"),t.type){case"normal":case"normal_integer":return t.min??Number.NEGATIVE_INFINITY;default:return t.min??0}}static chancyMax(t){if("string"==typeof t)return this.diceMax(t);if("number"==typeof t)return t;if("object"==typeof t)switch(void 0===t.type&&void 0!==t.skew&&(t.type="normal"),t.type){case"normal":case"normal_integer":return t.max??Number.POSITIVE_INFINITY;default:return t.max??1}}choice(t){return this.weightedChoice(t)}weightedChoice(t){let e,n=0;if(Array.isArray(t)){const e=new Map;return t.forEach((function(t){e.set(t,1)})),this.weightedChoice(e)}if(t instanceof Map)t.forEach(((t,e)=>{n+=t}));else for(e in t){if(t[e]<0)throw new Error("Probability cannot be negative");n+=t[e]}const o=this._random()*n;let r=0;if(t instanceof Map){for(const[e,n]of t)if(r+=n,o<r)return e}else for(e in t)if(r+=t[e],o<r)return e;return e}static parseDiceArgs(t=1,e=6,n=0){if(null==t||arguments.length<=0)throw new Error("Dice expects at least one argument");return"string"==typeof t?this.parseDiceString(t):("object"==typeof t&&(Array.isArray(t)?[t,e,n]=t:(e=t.d,n=t.plus,t=t.n)),{n:t,d:e,plus:n})}parseDiceArgs(t=1,e=6,n=0){const{constructor:o}=Object.getPrototypeOf(this);return o.parseDiceArgs(t)}static parseDiceString(t){if(!s[t])if(n.test(t)){const e=n.exec(t.replace(/ +/g,""));null!==e&&(s[t]={n:parseInt(e[1])/1||1,d:parseInt(e[2])/1||1,plus:parseFloat(e[3])/1||0})}else if(o.test(t)){const e=o.exec(t.replace(/ +/g,""));null!==e&&(s[t]={n:1,d:parseInt(e[1])/1||1,plus:parseFloat(e[2])/1||0})}return s[t]}static diceMax(t=1,e=6,n=0){return({n:t,d:e,plus:n}=this.parseDiceArgs(t,e,n)),t*e+n}static diceMin(t=1,e=6,n=0){return({n:t,d:e,plus:n}=this.parseDiceArgs(t,e,n)),t+n}dice(t=1,e=6,n=0){if(({n:t,d:e,plus:n}=this.parseDiceArgs(t,e,n)),"number"==typeof t){let o=Math.max(t,1);const r=Math.max(e,1);if(1===e)return n+1;let s=n||0;for(;o>0;)s+=this.randInt(1,r),o--;return s}throw new Error("Invalid arguments given to dice")}parseDiceString(t){const{constructor:e}=Object.getPrototypeOf(this);return e.parseDiceString(t)}clamp(t,e,n){return void 0!==n&&(t=t<=n?t:n),void 0!==e&&(t=t>=e?t:e),t}bin(t,e,n,o){const r=o-n;return Math.round((t-n)/r*(e-1))/(e-1)*r+n}}e.RngAbstract=i;e.default=class extends i{#e;#t;#n=0;constructor(t){super(t),this.#e=4294967295,this.#n=987654321}serialize(){return{mask:this.#e,seed:this.getSeed(),m_z:this.#n}}sameAs(t){const e=t.serialize();return this.#t===e.seed&&this.#e===e.mask&&this.#n===e.m_z}static unserialize(t){const e=new this;return e.setSeed(t.seed),e.#e=t.mask,e.#t=t.seed,e.#n=t.m_z,e}seed(t){return super.seed(t),this.#n=987654321,this}_random(){this.#n=36969*(65535&this.#n)+(this.#n>>16)&this.#e,this.setSeed(18e3*(65535&this.getSeed())+(this.getSeed()>>16)&this.#e);let t=(this.#n<<16)+this.getSeed()&this.#e;return t/=4294967296,t+.5}}},"./src/rng/predictable.ts":(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n("./src/rng.ts");class r extends o.RngAbstract{counter=0;_results=[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1-Number.EPSILON];constructor(t,e){super(t),e&&(this.results=e)}get results(){return this._results}set results(t){if(t.length<=0)throw new Error("Must provide some fake results.");for(const e of t){if(e<0)throw new Error(`Results must be greater than or equal to 0, got '${e}'`);if(e>=1)throw new Error(`Results must be less than 1, got '${e}'`)}this._results=t,this.reset()}evenSpread(t){const e=[];for(let n=0;n<t-1;n++)e.push(n/(t-1));return e.push(1-Number.EPSILON),e}setEvenSpread(t){return this.results=this.evenSpread(t),this}sameAs(t){return this.results.sort().join(",")===t.results.sort().join(",")&&this.counter===t.counter}reset(){return this.counter=0,this}_random(){return this.results[this.counter++%this.results.length]}}e.default=r},"./src/table.ts":(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n("./src/log.ts"),r=n("./src/table/pool.ts"),s=n("./src/table/pool/entry/results.ts"),i=n("./src/rng.ts");class l{name;id;fn;ul;rng;pools=[];functions={};conditions={};borrowed=new Set;constructor({name:t,rng:e,id:n,pools:o=[],fn:r,ul:s}={}){this.name=t,this.pools=o,this.fn=r,this.ul=s,this.rng=e??(s?s.getRng():new i.default),this.id=n??this.rng.uniqstr(6)}registerFunction(t,e){this.functions[t]=e}registerCondition(t,e){this.conditions[t]=e}get filename(){return this.fn??this.id??this.name??null}set filename(t){this.fn=t}get ultraloot(){return this.ul}set ultraloot(t){this.ul=t}get description(){return this.describe()}describe(){return this.name?`${this.name} [${this.id}]`:`[${this.id}]`}borrow(t){return this.borrowed.add(t),this}unborrow(t){return this.borrowed.delete(t),this}getPools(){return this.pools}setRng(t){return this.rng=t,this}rollBasics({rng:t,looter:e,context:n,n:r=1}){const s=t??this.rng,i=s.chancy(r);return o.default.gc(`Table: ${this.description} | Rolling table ${i} times (from chancy(${JSON.stringify(r)}))`,{looter:e,context:n}),[s,i]}rollSync({looter:t,context:e,result:n=new s.default,rng:r,n:i=1}={}){const[l,a]=this.rollBasics({rng:r,n:i,looter:t,context:e});for(const o of this.pools)this.rollPoolSync({n:a,pool:o,rng:l,looter:t,context:e,result:n});return o.default.ge(),n}async roll({looter:t,context:e,result:n=new s.default,rng:r,n:i=1}={}){const[l,a]=this.rollBasics({rng:r,n:i,looter:t,context:e});for(const o of this.pools)await this.rollPool({n:a,pool:o,rng:l,looter:t,context:e,result:n});return o.default.ge(),n}rollPoolSync({pool:t,looter:e,context:n,result:o=new s.default,rng:r,n:i=1}){const l=(r??this.rng).chancy(i);for(let s=0;s<l;s++)t.rollSync({rng:r,table:this,looter:e,context:n,result:o});return o}async rollPool({pool:t,looter:e,context:n,result:o=new s.default,rng:r,n:i=1}){const l=(r??this.rng).chancy(i);for(let s=0;s<l;s++)await t.roll({rng:r,table:this,looter:e,context:n,result:o});return o}hasFunction(t){return void 0!==this.functions[t.function]||Array.from(this.borrowed).reduce(((e,n)=>e||n.hasFunction(t)),!1)}hasCondition(t){return void 0!==this.conditions[t.function]||Array.from(this.borrowed).reduce(((e,n)=>e||n.hasCondition(t)),!1)}createPool(t){const e=new r.default(t);return this.pools.push(e),e}addPool(t){return t instanceof r.default?this.pools.push(t):this.createPool(t),this}getPotentialDrops(){const t=[];for(const e of this.pools){let n=0;for(const t of e.getEntries())n+=t instanceof l?1:t.weight??1;const o=i.default.chancyMax(e.rolls),r=i.default.chancyMin(e.rolls),s=i.default.chancyMin(e.nulls);for(const a of e.getEntries())if(a instanceof l||a.isTable()){let e,n;a instanceof l?(n=1,e=a):a.isTable()&&(n=a.weight??1,e=a.getItem());const i=e.getPotentialDrops();for(const e of i)t.push({entry:e.entry,weight:e.weight/n,min:s>0?0:r*e.min,max:o*e.max})}else t.push({entry:a,weight:a.weight/n,min:s>0?0:r*i.default.chancyMin(a.qty),max:o*i.default.chancyMax(a.qty)})}return t}async applyFunction(t,{rng:e,looted:n,looter:o,context:r,result:s}){if(void 0!==this.functions[t.function])return await this.functions[t.function]({rng:e,looted:n,looter:o,context:r,result:s,args:t.arguments});{for(const i of Array.from(this.borrowed))if(i.hasFunction(t))return await i.applyFunction(t,{rng:e,looted:n,looter:o,context:r,result:s});const i=`Function ${t.function} has not been defined. Did you forget to register the function with this loot table? table.registerFunction(name, function).`;if(this.ultraloot){if(this.ultraloot.hasFunction(t.function))return await this.ultraloot.applyFunction(t,{rng:e,looted:n,looter:o,context:r,result:s});if(this.ultraloot.throwOnMissingFunctions)throw new Error(i);console.error(i)}else console.error(i)}}async applyCondition(t,{rng:e,looted:n,looter:o,context:r,result:s}){if(void 0===this.conditions[t.function]){for(const i of Array.from(this.borrowed))if(i.hasCondition(t))return await i.applyCondition(t,{rng:e,looted:n,looter:o,context:r,result:s});const i=`Condition ${t.function} has not been defined. Did you forget to register the function with this loot table? table.registerCondition(name, condition_function).`;if(this.ultraloot){if(this.ultraloot.hasCondition(t.function))return await this.ultraloot.applyCondition(t,{rng:e,looted:n,looter:o,context:r,result:s});if(this.ultraloot.throwOnMissingConditions)throw new Error(i);return console.error(i),!0}return console.error(i),!0}return await this.conditions[t.function]({rng:e,looted:n,looter:o,context:r,result:s,args:t.arguments})}applyFunctionSync(t,{rng:e,looted:n,looter:o,context:r,result:s}){if(void 0!==this.functions[t.function])return this.functions[t.function]({rng:e,looted:n,looter:o,context:r,result:s,args:t.arguments});{for(const i of Array.from(this.borrowed))if(i.hasFunction(t))return i.applyFunctionSync(t,{rng:e,looted:n,looter:o,context:r,result:s});const i=`Function ${t.function} has not been defined. Did you forget to register the function with this loot table? table.registerFunction(name, function).`;if(this.ultraloot){if(this.ultraloot.hasFunction(t.function))return this.ultraloot.applyFunctionSync(t,{rng:e,looted:n,looter:o,context:r,result:s});if(this.ultraloot.throwOnMissingFunctions)throw new Error(i);console.error(i)}else console.error(i)}}applyConditionSync(t,{rng:e,looted:n,looter:o,context:r,result:s}){if(void 0===this.conditions[t.function]){for(const i of Array.from(this.borrowed))if(i.hasCondition(t))return i.applyConditionSync(t,{rng:e,looted:n,looter:o,context:r,result:s});const i=`Condition ${t.function} has not been defined. Did you forget to register the function with this loot table? table.registerCondition(name, condition_function).`;if(this.ultraloot){if(this.ultraloot.hasCondition(t.function))return this.ultraloot.applyConditionSync(t,{rng:e,looted:n,looter:o,context:r,result:s});if(this.ultraloot.throwOnMissingConditions)throw new Error(i);return console.error(i),!0}return console.error(i),!0}const i=this.conditions[t.function]({rng:e,looted:n,looter:o,context:r,result:s,args:t.arguments});if(i instanceof Promise)throw new Error("Cannot return promise from sync condition call");return i}}e.default=l},"./src/table/manager.ts":(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n("./src/table.ts");e.default=class{tables={};constructor(t={}){this.addTables(t)}addTables(t){if(Array.isArray(t))for(const e of t)this.addTable(e);else for(const[e,n]of Object.entries(t))this.addTable(e,n);return this}addTable(t,e){if("string"==typeof t&&void 0!==e&&e instanceof o.default)this.tables[t]=e;else if("string"==typeof e&&t instanceof o.default)this.tables[e]=t;else{if(!(t instanceof o.default))throw new Error("Error adding table - no loot table given?");this.tables[t.id]=t}return this}getTable(t){if(void 0===this.tables[t])throw new Error("Table not yet registered.");return this.tables[t]}}},"./src/table/pool.ts":(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n("./src/log.ts"),r=n("./src/table/pool/entry.ts"),s=n("./src/table/pool/entry/result.ts"),i=n("./src/table/pool/entry/results.ts"),l=n("./src/table.ts"),a=n("./src/rng.ts");class c{name;id;conditions=[];functions=[];rolls=1;nulls=0;entries=[];template={};static NULLKEY="__NULL__fd2a99d2-26c0-4454-a284-34578b94e0f6";constructor({name:t,id:e,conditions:n=[],functions:o=[],rolls:r=1,nulls:s=0,entries:i=[],template:l}={}){if(this.name=t,this.conditions=n??[],this.functions=o??[],this.rolls=r,this.nulls=s,this.id=e??(new a.default).uniqstr(6),this.template=l,i)for(const t of i)this.addEntry(t)}get description(){return this.describe()}describe(){return this.name?`${this.name} [${this.id}]`:`[${this.id}]`}createEntry(t){const e=new r.default({...this.template??{},...t});return this.entries.push(e),e}addEntry(t,e){return t instanceof l.default&&(t=new r.default({...this.template??{},...e??{},id:t.id,item:t})),t instanceof r.default?this.entries.push(t):this.createEntry(t),this}getEntries(){return this.entries}rollPreamble({rng:t}){const e=t.chancyInt(this.rolls);o.default.gc(`Pool ${this.description} | Rolling pool ${e} times (from chancy(${JSON.stringify(this.rolls)}))`);const n={};return t.chancy(this.nulls)>0&&(n[c.NULLKEY]=t.chancy(this.nulls)),this.entries.forEach(((e,o)=>{e instanceof l.default?n[o]=1:n[o]=t.chancy(e.weight??1)})),[e,n]}async roll({rng:t,table:e,looter:n,context:s,result:a=new i.default}){const[u,d]=this.rollPreamble({rng:t}),f=new i.default;for(let i=0;i<u;i++){const i=t.weightedChoice(d);if(i!==c.NULLKEY){const a=this.entries[i];a instanceof l.default?f.merge(await a.roll({looter:n,context:s,rng:t})):a instanceof r.default&&(o.default.g(`Pool ${this.description} | Rolling Loot Table Entry`),f.merge(await a.roll({rng:t,table:e,looter:n,context:s})),o.default.ge(),a.unique&&(d[i]=0))}else o.default.v(`Pool ${this.description} | Got null result`)}return await this.processEntryResults(f,{rng:t,table:e,looter:n,context:s,result:a}),o.default.ge(),a}rollSync({rng:t,table:e,looter:n,context:s,result:a=new i.default}){const[u,d]=this.rollPreamble({rng:t}),f=new i.default;for(let i=0;i<u;i++){const i=t.weightedChoice(d);if(i!==c.NULLKEY){const a=this.entries[i];a instanceof l.default?f.merge(a.rollSync({looter:n,context:s,rng:t})):a instanceof r.default&&(o.default.g(`Pool ${this.description} | Rolling Loot Table Entry`),f.merge(a.rollSync({rng:t,table:e,looter:n,context:s})),o.default.ge(),a.unique&&(d[i]=0))}else o.default.v(`Pool ${this.description} | Got null result`)}return this.processEntryResultsSync(f,{rng:t,table:e,looter:n,context:s,result:a}),o.default.ge(),a}async processEntryResults(t,{rng:e,table:n,looter:o,context:r,result:s=new i.default}){const l=[];for(const i of t)l.push(this.processEntryResult(i,{rng:e,table:n,looter:o,context:r,result:s}));return Promise.all(l)}processEntryResultsSync(t,{rng:e,table:n,looter:o,context:r,result:s=new i.default}){for(const i of t)this.processEntryResultSync(i,{rng:e,table:n,looter:o,context:r,result:s});return t}async processEntryResult(t,{rng:e,table:n,looter:r,context:l,result:a=new i.default}){for(const o of this.functions)await n.applyFunction(o,{rng:e,looted:t,looter:r,context:l,result:a});let c=!0;for(const s of this.conditions){const i=await n.applyCondition(s,{rng:e,looted:t,looter:r,context:l,result:a});if(o.default.v(`Pool ${this.description} | Testing function "${s.function}" resulted in ${JSON.stringify(i)}`),c=c&&i,!c){o.default.v(`Pool ${this.description} | Function "${s.function}" stopped this from being added`);break}}if(o.default.v(`Pool ${this.description} | After applying conditions, add was ${JSON.stringify(c)}`),c&&t.qty>0)if(t.stackable)a.push(t);else for(let e=0;e<t.qty;e++)a.push(new s.default({...t,qty:1}))}processEntryResultSync(t,{rng:e,table:n,looter:r,context:l,result:a=new i.default}){for(const o of this.functions)n.applyFunctionSync(o,{rng:e,looted:t,looter:r,context:l,result:a});let c=!0;for(const s of this.conditions){const i=n.applyConditionSync(s,{rng:e,looted:t,looter:r,context:l,result:a});if(o.default.v(`Pool ${this.description} | Testing function "${s.function}" resulted in ${JSON.stringify(i)}`),c=c&&i,!c){o.default.v(`Pool ${this.description} | Function "${s.function}" stopped this from being added`);break}}if(o.default.v(`Pool ${this.description} | After applying conditions, add was ${JSON.stringify(c)}`),c&&t.qty>0)if(t.stackable)a.push(t);else for(let e=0;e<t.qty;e++)a.push(new s.default({...t,qty:1}))}}e.default=c},"./src/table/pool/entry.ts":(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});const o=n("./src/log.ts"),r=n("./src/table.ts"),s=n("./src/table/pool/entry/result.ts"),i=n("./src/table/pool/entry/results.ts");e.default=class{id;stackable=!0;unique=!1;name;weight=1;item;qty=1;functions;conditions;constructor({id:t,stackable:e=!0,unique:n=!1,name:o,weight:r=1,item:s,functions:i=[],conditions:l=[],qty:a=1}={}){this.id=t,this.name=o,this.stackable=e,this.unique=n,this.weight=r,this.item=s,this.qty=a,this.functions=i??[],this.conditions=l??[]}get description(){return this.describe()}describe(){return this.name?`${this.name} [${this.id}]`:`[${this.id}]`}getItem(){return this.item??this.id}deepCloneObject(t){return JSON.parse(JSON.stringify(t))}cloneItem(){return null===this.item?null:"object"==typeof this.item?"function"==typeof this.item.clone?this.item.clone(this.item):this.deepCloneObject(this.item):this.item}isTable(){return this.getItem()instanceof r.default}resultDefinition(t){return{id:this.id,stackable:this.stackable,name:this.name,item:this.cloneItem(),qty:t.chancy(this.qty)}}generateBaseResults(t){const e=this.resultDefinition(t);return new i.default([new s.default(e)])}async roll({rng:t,table:e,looter:n,context:o,result:r=new i.default}){return this.isTable()?await this.rollTable({rng:t,table:e,looter:n,context:o,result:r}):await this.rollItem({rng:t,table:e,looter:n,context:o,result:r})}async rollItem({rng:t,table:e,looter:n,context:r,result:s=new i.default}){return o.default.d(`Entry: ${this.description} | Rolling Item for ${this.id}`,{looter:n,context:r}),await this.processEntryResults(this.generateBaseResults(t),{rng:t,table:e,looter:n,context:r,result:s}),s}async rollTable({rng:t,table:e,looter:n,context:o,result:r=new i.default}){const s=await this.getItem().borrow(e).roll({looter:n,context:o,result:[],rng:t,n:this.qty});return this.getItem().unborrow(e),await this.processEntryResults(s,{rng:t,table:e,looter:n,context:o,result:r}),r}async processEntryResults(t,{rng:e,table:n,looter:o,context:r,result:s=new i.default}){for(const i of t)await this.processEntryResult(i,{rng:e,table:n,looter:o,context:r,result:s});return t}async processEntryResult(t,{rng:e,table:n,looter:r,context:l,result:a=new i.default}){for(const o of this.functions)await n.applyFunction(o,{rng:e,looted:t,looter:r,context:l,result:a});let c=!0;for(const s of this.conditions)if(c=c&&await n.applyCondition(s,{rng:e,looted:t,looter:r,context:l,result:a}),!c){o.default.d(`Entry: ${this.description} | Function "${s.function}" stopped this from being added`);break}if(o.default.d(`Entry: ${this.description} | After applying conditions, add was ${JSON.stringify(c)}`),c&&t.qty>0)if(t.stackable)a.push(t);else for(let e=0;e<t.qty;e++)a.push(new s.default({...t,qty:1}))}rollSync({rng:t,table:e,looter:n,context:o,result:r=new i.default}){return this.isTable()?this.rollTableSync({rng:t,table:e,looter:n,context:o,result:r}):this.rollItemSync({rng:t,table:e,looter:n,context:o,result:r})}rollItemSync({rng:t,table:e,looter:n,context:r,result:s=new i.default}){return o.default.d(`Entry: ${this.description} | Rolling Item for ${this.id}`,{looter:n,context:r}),this.processEntryResultsSync(this.generateBaseResults(t),{rng:t,table:e,looter:n,context:r,result:s}),s}rollTableSync({rng:t,table:e,looter:n,context:o,result:r=new i.default}){const s=this.getItem().borrow(e).rollSync({looter:n,context:o,result:[],rng:t,n:this.qty});return this.getItem().unborrow(e),this.processEntryResultsSync(s,{rng:t,table:e,looter:n,context:o,result:r}),r}processEntryResultsSync(t,{rng:e,table:n,looter:o,context:r,result:s=new i.default}){for(const i of t)this.processEntryResultSync(i,{rng:e,table:n,looter:o,context:r,result:s});return t}processEntryResultSync(t,{rng:e,table:n,looter:r,context:l,result:a=new i.default}){for(const o of this.functions)n.applyFunctionSync(o,{rng:e,looted:t,looter:r,context:l,result:a});let c=!0;for(const s of this.conditions)if(c=c&&n.applyConditionSync(s,{rng:e,looted:t,looter:r,context:l,result:a}),!c){o.default.d(`Entry: ${this.description} | Function "${s.function}" stopped this from being added`);break}if(o.default.d(`Entry: ${this.description} | After applying conditions, add was ${JSON.stringify(c)}`),c&&t.qty>0)if(t.stackable||1===t.qty)a.push(t);else for(let e=0;e<t.qty;e++)a.push(new s.default({...t,qty:1}))}}},"./src/table/pool/entry/result.ts":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});e.default=class{id;stackable=!0;name;item;qty;constructor({id:t,stackable:e=!0,name:n,item:o,qty:r}={}){this.id=t,this.name=n,this.item=o,this.qty=r,this.stackable=e}get description(){return this.describe()}describe(){return this.name?`${this.name} [${this.id}]`:`[${this.id}]`}getQty(){return this.qty}setQty(t){this.qty=t}addQty(t){this.qty=this.qty+t}}},"./src/table/pool/entry/results.ts":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n extends Array{constructor(t){t instanceof Array?super(...t):t?super(t):super(),Object.setPrototypeOf(this,Object.create(n.prototype))}merge(t){for(const e of t)this.push(e);return this}merged(t){return new n([...this,...t])}entrySignature(t){const e={};for(const[n,o]of Object.entries(t))"id"!==n&&(e[n]=o);return JSON.stringify(t)}collapsed(){const t={},e=[];for(const n of this)if(n.stackable){const e=this.entrySignature(n);t[e]?t[e].addQty(n.qty):t[e]=n}else e.push(n);return new n([...e,...Object.values(t)])}}e.default=n},"./src/ultraloot.ts":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.UltraLoot=exports.RecursiveTableError=void 0;const log_1=__webpack_require__("./src/log.ts"),table_1=__webpack_require__("./src/table.ts"),pool_1=__webpack_require__("./src/table/pool.ts"),entry_1=__webpack_require__("./src/table/pool/entry.ts"),rng_1=__webpack_require__("./src/rng.ts"),package_json_1=__webpack_require__("./package.json"),defaultFunctions=__webpack_require__("./src/default/functions.ts"),defaultConditions=__webpack_require__("./src/default/conditions.ts");let fs,isNode=!1;"object"==typeof process&&"object"==typeof process.versions&&void 0!==process.versions.node&&(fs=__webpack_require__("fs"),isNode=!0);const VERSION_KEY="__version__";class RecursiveTableError extends Error{}exports.RecursiveTableError=RecursiveTableError;class UltraLoot{defaultRng;rng;rngConstructor;functions={};conditions={};throwOnMissingFunctions=!0;throwOnMissingConditions=!0;constructor(t){log_1.default.d("UltraLoot initialising"),t&&(this.rng=this.makeRng(t))}registerDefaults(){return this.registerDefaultFunctions(),this.registerDefaultConditions(),this}registerDefaultFunctions(){for(const[t,e]of Object.entries(defaultFunctions))this.registerFunction(t,e);return this}registerDefaultConditions(){for(const[t,e]of Object.entries(defaultConditions))this.registerCondition(t,e);return this}instance(t){return new UltraLoot(t)}setRng(t){if(!this.isRng(t))throw new Error("rng given does not confirm to RngInterface");this.rng=t}getRng(){return this.rng??this.getDefaultRng()}getDefaultRng(){return this.defaultRng??(this.defaultRng=this.makeRng())}setRngConstructor(t){this.rngConstructor=t}getRngConstructor(){return this.rngConstructor??Object.getPrototypeOf(this.rng).constructor}isRng(t){if(void 0===t)return!1;if("object"!=typeof t)return!1;const e=["predictable","hashStr","convertStringToNumber","getSeed","seed","percentage","random","chance","chanceTo","randInt","uniqid","uniqstr","randBetween","normal","chancyInt","chancy","weightedChoice","dice","parseDiceString","clamp","bin","serialize"];let n=!0;for(const o of e)n=n&&"function"==typeof t[o];return n}makeRng(t){if(this.isRng(t))return t;return new(this.rngConstructor??rng_1.default)(t)}registerFunction(t,e){this.functions[t]=e}registerCondition(t,e){this.conditions[t]=e}hasFunction(t){return void 0!==this.functions[t]}hasCondition(t){return void 0!==this.conditions[t]}noThrowOnMissingFunctionsOrConditions(){return this.throwOnMissingFunctions=!1,this.throwOnMissingConditions=!1,this}throwOnMissingFunctionsOrConditions(){return this.throwOnMissingFunctions=!0,this.throwOnMissingConditions=!0,this}functionCheck(t){if(log_1.default.d(`UL | Applying function ${t.function}`),void 0===this.functions[t.function]){const e=`Function ${t.function} has not been defined. Did you forget to register the function with this loot table? UltraLoot.registerFunction(name, function).`;if(this.throwOnMissingFunctions)throw new Error(e);return console.error(e),!1}return!0}conditionCheck(t){if(log_1.default.d(`UL | Applying condition ${t.function}`),void 0===this.conditions[t.function]){const e=`Condition ${t.function} has not been defined. Did you forget to register the function with this loot table? UltraLoot.registerCondition(name, condition_function).`;if(this.throwOnMissingConditions)throw new Error(e);return console.error(e),!1}return!0}applyFunctionSync(t,{rng:e,looted:n,looter:o,context:r,result:s}){if(this.functionCheck(t))return this.functions[t.function]({rng:e,looted:n,looter:o,context:r,result:s,args:t.arguments})}applyConditionSync(t,{rng:e,looted:n,looter:o,context:r,result:s}){if(this.conditionCheck(t)){const i=this.conditions[t.function]({rng:e,looted:n,looter:o,context:r,result:s,args:t.arguments});if(i instanceof Promise)throw new Error("Cannot return promise from sync condition call");return i}}async applyFunction(t,{rng:e,looted:n,looter:o,context:r,result:s}){if(this.functionCheck(t))return await this.functions[t.function]({rng:e,looted:n,looter:o,context:r,result:s,args:t.arguments})}async applyCondition(t,{rng:e,looted:n,looter:o,context:r,result:s}){if(this.conditionCheck(t))return await this.conditions[t.function]({rng:e,looted:n,looter:o,context:r,result:s,args:t.arguments})}createTable(t){if(t instanceof table_1.default||this.isLootTableDefinition(t)){t instanceof table_1.default?log_1.default.vv("Creating table from LootTable"):log_1.default.vv("Creating table from LootTableDefinition"),t.ul=this,t.rng?t.rng=t.rng??this.makeRng(t.rng):t.rng=this.getRng();const e=new table_1.default(t);return e.ultraloot=this,e}if(this.isEasyLootTableDefinition(t)){log_1.default.vv("Creating table from LootTableEasyDefinition"),t.rng?t.rng=t.rng??this.makeRng(t.rng):t.rng=this.getRng();const e=new table_1.default(this.transformEasyToProperLootTableDefinition(t));return e.ultraloot=this,e}throw new Error("Cannot create loot table from these params")}createPool(t){return this.isEasyLootTablePoolDefinition(t)?(log_1.default.vv("Creating pool from LootTablePoolEasyDefinition"),new pool_1.default(this.transformEasyToProperLootTablePoolDefinition(t))):(log_1.default.vv("Creating pool from LootTablePoolDefinition"),new pool_1.default(t))}createEntry(t){return t instanceof table_1.default?new entry_1.default({id:t.id,name:t.name,item:t,qty:1}):new entry_1.default(t)}isLootTableDefinition(t){if(t instanceof table_1.default||t instanceof pool_1.default||t instanceof entry_1.default)return!1;if(t.pools)for(const e of t.pools)if(!(e instanceof pool_1.default))return!1;return"object"==typeof t}isEasyLootTableDefinition(t){if(t instanceof table_1.default||t instanceof pool_1.default||t instanceof entry_1.default)return!1;if(t.pools)for(const e of t.pools)if(e instanceof pool_1.default)return!1;return"object"==typeof t}isEasyLootTablePoolDefinition(t){if(t instanceof table_1.default||t instanceof pool_1.default||t instanceof entry_1.default)return!1;if(t.entries)for(const e of t.entries)if(e instanceof entry_1.default)return!1;return"object"==typeof t}transformEasyToProperLootTableDefinition(t){const e={rng:this.makeRng(t.rng??this.getRng()),name:t.name,id:t.id,pools:[]};if(t.pools)for(const n of t.pools)e.pools.push(this.createPool(n));return e.ul=this,e}transformEasyToProperLootTablePoolDefinition(t){return{name:t.name,id:t.id,rolls:t.rolls,nulls:t.nulls,template:t.template,conditions:t.conditions,functions:t.functions,entries:t.entries}}pathJoin(t,e="/"){return t.join(e).replace(new RegExp(e+"{1,}","g"),e)}finishWith(t,e){return t.endsWith(e)?t:t+e}finishWithExtension(t,e){if(t.endsWith(e))return t;const n=t.split("/").pop().split("\\").pop(),o=n.includes(".")?n.lastIndexOf("."):n.length;return`${t.substr(0,t.length-n.length+o)}.${e.replace(".","")}`}getExtension(t){const e=t.split("/").pop().split("\\").pop();if(!e.includes("."))return null;const n=e.lastIndexOf(".");return e.substr(n,e.length)}serialize(t,{includeRng:e=!1,key:n,had:o=new Set}={}){const r={},s={name:t.name,id:t.id,fn:t.fn,pools:[]},i=t.filename??this.getRng().uniqstr(6);o.add(t),e&&(s.rng=t.rng?.serialize()??null);for(const n of t.pools??[]){const t={name:n.name,id:n.id,rolls:n.rolls,nulls:n.nulls,conditions:n.conditions,functions:n.functions,entries:[]};for(const s of n.entries??[]){const n={name:s.name,id:s.id};if(s instanceof table_1.default?n.item=s:(n.stackable=s.stackable,n.weight=s.weight,n.item=s.item,n.qty=s.qty,n.conditions=s.conditions,n.functions=s.functions),n.item instanceof table_1.default){const t=n.item.filename??this.getRng().uniqstr(6);if(o.has(n.item))throw new RecursiveTableError("Recursive requirement detected - cannot serialize recursively required tables.");if(void 0===r[t]){n.item.filename=t;const s=this.serialize(n.item,{includeRng:e,key:t,had:o});r[t]=s.tables[t]}n.type="table",n.item=t}t.entries.push(n)}s.pools.push(t)}r[i]=s;return{[VERSION_KEY]:package_json_1.version,tables:r}}toJson(t,{includeRng:e=!1}={}){return JSON.stringify(this.serialize(t,{includeRng:e}))}async saveTable(t,{path:e="",defaultExtension:n}={}){throw new Error("Not yet implemented.")}async loadTables(t,{path:e="",defaultExtension:n}={}){n=n??this.getExtension(e)??".json";const o=this.finishWith(this.pathJoin([e,t]),n);return isNode?o.startsWith("http")||o.startsWith("file://")?this.loadTablesFromUrl(o,{path:e}):this.loadTablesFromFile(o,{path:e}):this.loadTablesFromUrl(o,{path:e})}async loadTablesFromFile(filename,{path="",defaultExtension}={}){let contents;defaultExtension=defaultExtension??this.getExtension(path)??".json",log_1.default.d(`Reading tables from ${filename}`);const ext=this.getExtension(filename);if(".js"===ext){const cb=await fs.promises.readFile(`${filename}`,"utf8");contents=eval(cb)}else contents=await fs.promises.readFile(filename,"utf8").then((t=>JSON.parse(t))).catch((t=>{if(t instanceof SyntaxError)throw t.message=`There was an error loading file: "${filename}". ${t.message}`,t;throw t}));return this.unserialize(contents)}async loadTablesFromUrl(t,{path:e="",defaultExtension:n}={}){return n=n??this.getExtension(t)??".json",log_1.default.d(`Reading tables from ${t}`),fetch(t).then((t=>t.text())).then((e=>{try{return JSON.parse(e)}catch(e){if(e instanceof SyntaxError)throw e.message=`There was an error loading file: "${t}". ${e.message}`,e;throw e}})).then((t=>this.unserialize(t)))}async loadTable(t,{path:e="",defaultExtension:n}={}){const o=n??this.getExtension(t)??".json",r=this.finishWithExtension(this.pathJoin([e,t]),o);return log_1.default.d("Load Table",{filenameWithPath:this.pathJoin([e,t]),filename:t,defaultExtension:n,ext:o,path:e,fullPath:r}),isNode?r.startsWith("http")||r.startsWith("file://")?this.loadTableFromUrl(r,{path:e,defaultExtension:n}):this.loadTableFromFile(t,{path:e,defaultExtension:n}):this.loadTableFromUrl(r,{path:e,defaultExtension:n})}async loadTableFromFile(filename,{path="",defaultExtension}={}){defaultExtension=defaultExtension??this.getExtension(filename)??".json";const extension=this.getExtension(filename),pj=this.pathJoin([path,filename]);if(!extension){if(fs.existsSync(pj)&&fs.statSync(pj).isFile()){const t=await fs.promises.readFile(pj,"utf8").then((t=>JSON.parse(t))).catch((t=>{if(t instanceof SyntaxError)throw t.message=`There was an error loading file: "${filename}". ${t.message}`,t;throw t}));return this.resolveTable(t,{path,defaultExtension})}const t=new Set([defaultExtension,".json",".js",".cjs",".mjs"]);for(const e of t){const t=this.finishWithExtension(pj,e);if(fs.existsSync(t)&&fs.statSync(t).isFile())return this.loadTableFromFile(this.finishWithExtension(filename,e),{path,defaultExtension})}}if(!fs.existsSync(pj))throw new Error(`Could not find file "${filename}" in path "${path}"`);let contents;if(".js"===extension||".mjs"===extension||".cjs"===extension){const cb=await fs.promises.readFile(`${pj}`,"utf8");contents=eval(cb)}else".json"!==extension&&""!==defaultExtension||(contents=await fs.promises.readFile(pj,"utf8").then((t=>JSON.parse(t))).catch((t=>{if(t instanceof SyntaxError)throw t.message=`There was an error loading file: "${filename}". ${t.message}`,t;throw t})));return this.resolveTable(contents,{path,defaultExtension})}async loadTableFromUrl(t,{path:e="",defaultExtension:n}={}){return n=n??this.getExtension(t)??".json",fetch(t).then((t=>t.text())).then((e=>{try{return JSON.parse(e)}catch(e){if(e instanceof SyntaxError)throw e.message=`There was an error loading file: "${t}". ${e.message}`,e;throw e}})).then((t=>this.resolveTable(t,{path:e,defaultExtension:n})))}async resolveTable(t,{path:e="",defaultExtension:n}={}){for(const o of t.pools??[])for(const t of o.entries??[])"table"===t.type&&(t.item=await this.loadTable(t.item,{path:e,defaultExtension:n})),delete t.type;return this.createTable(t)}unserialize(t){const e={};let n=100;for(;Object.values(t.tables).length>0&&n-- >0;)t:for(const[n,o]of Object.entries(t.tables)){const r=o.rng??null;delete o.rng,log_1.default.v(`Unserializing table ${n}`);for(const n of o.pools??[])for(const o of n.entries??[]){if("table"===o.type){if(void 0===e[o.item]){if(void 0===t.tables[o.item])throw new Error(`Table ${o.item} not present in serialized data`);log_1.default.v(`We didn't have ${o.item} in our results`);continue t}o.item=e[o.item]}delete o.type}e[n]=this.createTable(o),r&&e[n].setRng(this.getRngConstructor().unserialize(r)),delete t.tables[n]}if(0===n)throw new Error("Maximum nested serialized table limit reached (could be a recursive requirement somewhere causing an issue?)");return e}}exports.UltraLoot=UltraLoot,exports.default=UltraLoot},"./src/utils.ts":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.depend=e.dotSet=e.dotGet=void 0;e.dotGet=(t,e,n)=>{const o=e.split(".").reduce(((t,e)=>void 0!==t?t[e]:t),t);return void 0===o?n:o};e.dotSet=(t,e,n)=>{const o=e.split(".");let r=t;for(let t=0;t<o.length-1;t++){const e=o[t];e in r||(r[e]={}),r=r[e]}r[o[o.length-1]]=n};e.depend=(t,{property:n,tobe:o,min:r,max:s,inverse:i=!1,strict:l=!0}={})=>{if(i=!!i,!t)return i;let a=t;if("string"==typeof n&&(a=(0,e.dotGet)(t,n)),void 0!==o)return a=l?a===o:a==o,i?!a:!!a;if((void 0!==r||void 0!==s)&&l&&"number"!=typeof a)return!1;if(null!=a){if(void 0!==r&&parseFloat(a)<r)return i;if(void 0!==s&&parseFloat(a)>s)return i;if(void 0!==r||void 0!==s)return!i}return i?!a:!!a}},fs:t=>{t.exports=require("fs")},"./package.json":t=>{t.exports=JSON.parse('{"name":"ultraloot","version":"0.0.1","description":"","main":"dist/ultraloot.js","module":"dist/index.js","scripts":{"watch":"webpack --config webpack.dev.config.js --watch","dev":"webpack --config webpack.dev.config.js","build":"webpack --config webpack.production.config.js && npx typedoc","ci":"npm t && npm run test-build","test-build":"npm run build && node test-build.js && node test-build-common.cjs && node test-build-module.mjs","test":"jest --coverage","test-watch":"jest --coverage --watchAll"},"files":["dist"],"keywords":[],"author":"Harry Mustoe-Playfair","license":"MIT","devDependencies":{"@babel/core":"^7.25.2","@babel/preset-env":"^7.25.4","@types/jest":"^29.5.13","autoprefixer":"^10.4.20","babel-loader":"^9.2.1","eslint":"^9.11.1","html-loader":"^5.1.0","jest":"^29.7.0","jsdoc":"^4.0.3","neostandard":"^0.11.6","terser-webpack-plugin":"^5.3.10","ts-jest":"^29.2.5","ts-loader":"^9.5.1","typedoc":"^0.26.7","typedoc-plugin-rename-defaults":"^0.7.1","typescript":"^5.6.2","val-loader":"^6.0.0","webpack":"^5.95.0","webpack-cli":"^5.1.4"}}')}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(n.exports,n,n.exports,__webpack_require__),n.exports}var __webpack_exports__=__webpack_require__("./src/index.ts");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,